CREATE OR REPLACE PACKAGE tapi_wdx_ldap
IS
   /**
   * TAPI_WDX_LDAP
   * Generated by: tapiGen2 - DO NOT MODIFY!
   * Website: github.com/osalvador/tapiGen2
   * Created On: 30-MAY-2016 22:17
   * Created By: DBAX
   */

   --Scalar/Column types
   SUBTYPE hash_t IS varchar2 (40);
   SUBTYPE name IS wdx_ldap.name%TYPE;
   SUBTYPE host IS wdx_ldap.host%TYPE;
   SUBTYPE port IS wdx_ldap.port%TYPE;
   SUBTYPE dn IS wdx_ldap.dn%TYPE;
   SUBTYPE base IS wdx_ldap.base%TYPE;
   SUBTYPE filter IS wdx_ldap.filter%TYPE;
   SUBTYPE attr_first_name IS wdx_ldap.attr_first_name%TYPE;
   SUBTYPE attr_last_name IS wdx_ldap.attr_last_name%TYPE;
   SUBTYPE attr_email IS wdx_ldap.attr_email%TYPE;
   SUBTYPE description IS wdx_ldap.description%TYPE;
   SUBTYPE created_by IS wdx_ldap.created_by%TYPE;
   SUBTYPE created_date IS wdx_ldap.created_date%TYPE;
   SUBTYPE modified_by IS wdx_ldap.modified_by%TYPE;
   SUBTYPE modified_date IS wdx_ldap.modified_date%TYPE;

   --Record type
   TYPE wdx_ldap_rt
   IS
      RECORD (
            name wdx_ldap.name%TYPE,
            host wdx_ldap.host%TYPE,
            port wdx_ldap.port%TYPE,
            dn wdx_ldap.dn%TYPE,
            base wdx_ldap.base%TYPE,
            filter wdx_ldap.filter%TYPE,
            attr_first_name wdx_ldap.attr_first_name%TYPE,
            attr_last_name wdx_ldap.attr_last_name%TYPE,
            attr_email wdx_ldap.attr_email%TYPE,
            description wdx_ldap.description%TYPE,
            created_by wdx_ldap.created_by%TYPE,
            created_date wdx_ldap.created_date%TYPE,
            modified_by wdx_ldap.modified_by%TYPE,
            modified_date wdx_ldap.modified_date%TYPE,
            hash               hash_t,
            row_id            VARCHAR2(64)
      );
   --Collection types (record)
   TYPE wdx_ldap_tt IS TABLE OF wdx_ldap_rt;

   --Global exceptions
   e_ol_check_failed EXCEPTION; --Optimistic lock check failed
   e_row_missing     EXCEPTION; --The cursor failed to get a row
   e_upd_failed      EXCEPTION; --The update operation failed
   e_del_failed      EXCEPTION; --The delete operation failed

   /**
   * Generates a SHA1 hash for optimistic locking purposes.
   *
   * @param    p_name        must be NOT NULL
   */
   FUNCTION hash (
                  p_name IN wdx_ldap.name%TYPE
                 )
    RETURN VARCHAR2;

   /**
   * This function generates a SHA1 hash for optimistic locking purposes.
   * Access directly to the row by rowid
   *
   * @param  p_rowid  must be NOT NULL
   */
   FUNCTION hash_rowid (p_rowid IN varchar2)
   RETURN varchar2;

   /**
   * This is a table encapsulation function designed to retrieve information from the wdx_ldap table.
   *
   * @param      p_name      must be NOT NULL
   * @return     wdx_ldap Record Type
   */
   FUNCTION rt (
                p_name IN wdx_ldap.name%TYPE 
               )
    RETURN wdx_ldap_rt RESULT_CACHE;

   /**
   * This is a table encapsulation function designed to retrieve information
   * from the wdx_ldap table while placing a lock on it for a potential
   * update/delete. Do not use this for updates in web based apps, instead use the
   * rt_for_web_update function to get a FOR_WEB_UPDATE_RT record which
   * includes all of the tables columns along with an md5 checksum for use in the
   * web_upd and web_del procedures.
   *
   * @param      p_name      must be NOT NULL
   * @return     wdx_ldap Record Type
   */
   FUNCTION rt_for_update (
                          p_name IN wdx_ldap.name%TYPE 
                          )
    RETURN wdx_ldap_rt RESULT_CACHE;

   /**
   * This is a table encapsulation function designed to retrieve information from the wdx_ldap table.
   * This function return Record Table as PIPELINED Function
   *
   * @param      p_name      must be NOT NULL
   * @return     wdx_ldap Table Record Type
   */
   FUNCTION tt (
                p_name IN wdx_ldap.name%TYPE DEFAULT NULL
               )
   RETURN wdx_ldap_tt
   PIPELINED;

   /**
   * This is a table encapsulation function designed to insert a row into the wdx_ldap table.
   *
   * @param      p_wdx_ldap_rec       Record Type
   * @return     p_wdx_ldap_rec       Record Type
   */
   PROCEDURE ins (p_wdx_ldap_rec IN OUT wdx_ldap_rt);

   /**
   * This is a table encapsulation function designed to update a row in the wdx_ldap table.
   *
   * @param      p_wdx_ldap_rec      Record Type
   * @param      p_ignore_nulls      IF TRUE then null values are ignored in the update
   */
   PROCEDURE upd (p_wdx_ldap_rec IN wdx_ldap_rt, p_ignore_nulls IN boolean := FALSE);

   /**
   * This is a table encapsulation function designed to update a row in the wdx_ldap table,
   * access directly to the row by rowid
   *
   * @param      p_wdx_ldap_rec      Record Type
   * @param      p_ignore_nulls      IF TRUE then null values are ignored in the update
   */
   PROCEDURE upd_rowid (p_wdx_ldap_rec IN wdx_ldap_rt, p_ignore_nulls IN boolean := FALSE);

   /**
   * This is a table encapsulation function designed to update a row
   * in the wdx_ldap table whith optimistic lock validation
   *
   * @param      p_wdx_ldap_rec      Record Type
   * @param      p_ignore_nulls      IF TRUE then null values are ignored in the update
   */
   PROCEDURE web_upd (p_wdx_ldap_rec IN wdx_ldap_rt, p_ignore_nulls IN boolean := FALSE);

   /**
   * This is a table encapsulation function designed to update a row
   * in the wdx_ldap table whith optimistic lock validation
   * access directly to the row by rowid
   *
   * @param      p_wdx_ldap_rec      Record Type
   * @param      p_ignore_nulls      IF TRUE then null values are ignored in the update
   */
   PROCEDURE web_upd_rowid (p_wdx_ldap_rec IN wdx_ldap_rt, p_ignore_nulls IN boolean := FALSE);

   /**
   * This is a table encapsulation function designed to delete a row from the wdx_ldap table.
   *
   * @param    p_name        must be NOT NULL
   */
   PROCEDURE del (
                  p_name IN wdx_ldap.name%TYPE
                );

   /**
   * This is a table encapsulation function designed to delete a row from the wdx_ldap table
   * access directly to the row by rowid
   *
   * @param      p_rowid      must be NOT NULL
   */
    PROCEDURE del_rowid (p_rowid IN VARCHAR2);

   /**
   * This is a table encapsulation function designed to delete a row from the wdx_ldap table
   * whith optimistic lock validation
   *
   * @param      p_name      must be NOT NULL
   * @param      p_hash       must be NOT NULL
   */
    PROCEDURE web_del (
                      p_name IN wdx_ldap.name%TYPE,
                      p_hash IN varchar2
                      );

   /**
   * This is a table encapsulation function designed to delete a row from the wdx_ldap table
   * whith optimistic lock validation, access directly to the row by rowid
   *
   * @param      p_rowid      must be NOT NULL
   * @param      p_hash       must be NOT NULL
   */
    PROCEDURE web_del_rowid (p_rowid IN varchar2, p_hash IN varchar2);

END tapi_wdx_ldap;
/

