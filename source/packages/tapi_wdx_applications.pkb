CREATE OR REPLACE PACKAGE BODY tapi_wdx_applications IS

   /**
   -- # TAPI_wdx_applications
   -- Generated by: tapiGen2 - DO NOT MODIFY!
   -- Website: github.com/osalvador/tapiGen2
   -- Created On: 16-SEP-2015 09:43
   -- Created By: DBAX
   */

   --GLOBAL_PRIVATE_CURSORS
   --By PK
   CURSOR wdx_applications_cur (
                       p_appid IN wdx_applications.appid%TYPE
                       )
   IS
      SELECT
            appid,
            name,
            description,
            active,
            app_type,
            access_control,
            auth_scheme,
            created_by,
            created_date,
            modified_by,
            modified_date,
            tapi_wdx_applications.hash(4),
            ROWID
      FROM wdx_applications
      WHERE
           appid = UPPER(wdx_applications_cur.p_appid)
      FOR UPDATE;

    --By Rowid
    CURSOR wdx_applications_rowid_cur (p_rowid IN VARCHAR2)
    IS
      SELECT
             appid,
             name,
             description,
             active,
             app_type,
             access_control,
             auth_scheme,
             created_by,
             created_date,
             modified_by,
             modified_date,
             tapi_wdx_applications.hash(appid),
             ROWID
      FROM wdx_applications
      WHERE ROWID = p_rowid
      FOR UPDATE;

    FUNCTION num_rows RETURN PLS_INTEGER
    AS
       l_count pls_integer;
    BEGIN
       SELECT   COUNT (appid) into l_count FROM wdx_applications;
       return l_count; 
    END num_rows;

    FUNCTION hash (
                  p_appid IN wdx_applications.appid%TYPE
                  )
      RETURN varchar2
   IS
      l_retval hash_t;
      l_string CLOB;
      l_date_format VARCHAR2(64);
   BEGIN

     --Get actual NLS_DATE_FORMAT
     SELECT   VALUE
       INTO   l_date_format
       FROM   v$nls_parameters
      WHERE   parameter = 'NLS_DATE_FORMAT';

      --Alter session for date columns
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''YYYY/MM/DD hh24:mi:ss''';

      SELECT
            appid||
            name||
            description||
            active||
            app_type||
            access_control||
            auth_scheme||
            created_by||
            created_date||
            modified_by||
            modified_date
      INTO l_string
      FROM wdx_applications
      WHERE
           appid = UPPER(hash.p_appid)
           ;

      --Restore NLS_DATE_FORMAT to default
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''' || l_date_format|| '''';
      l_retval := DBMS_CRYPTO.hash(l_string, DBMS_CRYPTO.hash_sh1);

      RETURN l_retval;
   END hash;

    FUNCTION hash_rowid (p_rowid IN varchar2)
      RETURN varchar2
   IS
      l_retval hash_t;
      l_string CLOB;
      l_date_format varchar2(64);
   BEGIN

      --Get actual NLS_DATE_FORMAT
      SELECT VALUE INTO l_date_format  FROM v$nls_parameters WHERE parameter ='NLS_DATE_FORMAT';

      --Alter session for date columns
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''YYYY/MM/DD hh24:mi:ss''';

      SELECT
            appid||
            name||
            description||
            active||
            app_type || 
            access_control||
            auth_scheme||
            created_by||
            created_date||
            modified_by||
            modified_date
      INTO l_string
      FROM wdx_applications
      WHERE  ROWID = hash_rowid.p_rowid;

      --Restore NLS_DATE_FORMAT to default
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''' || l_date_format|| '''';
      l_retval := DBMS_CRYPTO.hash(l_string, DBMS_CRYPTO.hash_sh1);
      RETURN l_retval;
   END hash_rowid;

   FUNCTION rt (
               p_appid IN wdx_applications.appid%TYPE
               )
      RETURN wdx_applications_rt RESULT_CACHE
   IS
      l_wdx_applications_rec wdx_applications_rt;
   BEGIN

      SELECT a.*,
             tapi_wdx_applications.hash(appid),
             rowid
      INTO l_wdx_applications_rec
      FROM wdx_applications a
      WHERE
           appid = UPPER(rt.p_appid)
           ;

      RETURN l_wdx_applications_rec;
   END rt;
   
   FUNCTION rt_simple (
               p_appid IN wdx_applications.appid%TYPE
               )
      RETURN wdx_applications_rt RESULT_CACHE
   IS
      l_wdx_applications_rec wdx_applications_rt;
   BEGIN

      SELECT a.*,
             '',
             rowid
      INTO l_wdx_applications_rec
      FROM wdx_applications a
      WHERE
           appid = UPPER(rt_simple.p_appid)
           ;

      RETURN l_wdx_applications_rec;
   END rt_simple;
   

   FUNCTION rt_for_update (
                          p_appid IN wdx_applications.appid%TYPE
                          )
      RETURN wdx_applications_rt RESULT_CACHE
   IS
      l_wdx_applications_rec wdx_applications_rt;
   BEGIN

      SELECT a.*,
             tapi_wdx_applications.hash(appid),
             rowid
      INTO l_wdx_applications_rec
      FROM wdx_applications a
      WHERE
           appid = UPPER(rt_for_update.p_appid)
      FOR UPDATE;

      RETURN l_wdx_applications_rec;
   END rt_for_update;

    FUNCTION tt (
                p_appid IN wdx_applications.appid%TYPE DEFAULT NULL
                )
       RETURN wdx_applications_tt
       PIPELINED
    IS
       l_wdx_applications_rec   wdx_applications_rt;
    BEGIN

       FOR c1 IN (SELECT   a.*, ROWID
                    FROM   wdx_applications a
                   WHERE
                        appid = NVL(UPPER(tt.p_appid),appid)
                        )
       LOOP
              l_wdx_applications_rec.appid := c1.appid;
              l_wdx_applications_rec.name := c1.name;
              l_wdx_applications_rec.description := c1.description;
              l_wdx_applications_rec.active := c1.active;
              l_wdx_applications_rec.app_type := c1.app_type;
              l_wdx_applications_rec.access_control := c1.access_control;
              l_wdx_applications_rec.auth_scheme := c1.auth_scheme;
              l_wdx_applications_rec.created_by := c1.created_by;
              l_wdx_applications_rec.created_date := c1.created_date;
              l_wdx_applications_rec.modified_by := c1.modified_by;
              l_wdx_applications_rec.modified_date := c1.modified_date;
              l_wdx_applications_rec.hash := tapi_wdx_applications.hash( c1.appid);
              l_wdx_applications_rec.row_id := c1.ROWID;
              PIPE ROW (l_wdx_applications_rec);
       END LOOP;

       RETURN;
    END tt;


    PROCEDURE ins (p_wdx_applications_rec IN OUT wdx_applications_rt)
    IS
        l_rowtype     wdx_applications%ROWTYPE;
        l_user_name   wdx_applications.created_by%TYPE := NVL(dbax_core.g$username,USER);
        l_date        wdx_applications.created_date%TYPE := SYSDATE;

    BEGIN

        p_wdx_applications_rec.created_by := l_user_name;
        p_wdx_applications_rec.created_date := l_date;
        p_wdx_applications_rec.modified_by := l_user_name;
        p_wdx_applications_rec.modified_date := l_date;

        l_rowtype.appid := UPPER(ins.p_wdx_applications_rec.appid);
        l_rowtype.name := ins.p_wdx_applications_rec.name;
        l_rowtype.description := ins.p_wdx_applications_rec.description;
        l_rowtype.active := ins.p_wdx_applications_rec.active;
        l_rowtype.app_type := NVL(ins.p_wdx_applications_rec.app_type,'APP');
        l_rowtype.access_control := ins.p_wdx_applications_rec.access_control;
        l_rowtype.auth_scheme := ins.p_wdx_applications_rec.auth_scheme;
        l_rowtype.created_by := ins.p_wdx_applications_rec.created_by;
        l_rowtype.created_date := ins.p_wdx_applications_rec.created_date;
        l_rowtype.modified_by := ins.p_wdx_applications_rec.modified_by;
        l_rowtype.modified_date := ins.p_wdx_applications_rec.modified_date;

       INSERT INTO wdx_applications
         VALUES   l_rowtype;

    END ins;

    PROCEDURE upd (
                  p_wdx_applications_rec         IN wdx_applications_rt,
                  p_ignore_nulls         IN boolean := FALSE
                  )
    IS
    BEGIN

       IF NVL (p_ignore_nulls, FALSE)
       THEN
          UPDATE   wdx_applications
             SET appid = NVL(p_wdx_applications_rec.appid,appid),
                name = NVL(p_wdx_applications_rec.name,name),
                description = NVL(p_wdx_applications_rec.description,description),
                active = NVL(p_wdx_applications_rec.active,active),
                app_type = NVL(p_wdx_applications_rec.app_type,app_type),
                access_control = NVL(p_wdx_applications_rec.access_control,access_control),
                auth_scheme = NVL(p_wdx_applications_rec.auth_scheme,auth_scheme),
                modified_by = NVL(dbax_security.get_username(dbax_core.g$appid),USER),
                modified_date = SYSDATE
           WHERE
                appid = UPPER(upd.p_wdx_applications_rec.appid)
                ;
       ELSE
          UPDATE   wdx_applications
             SET appid = p_wdx_applications_rec.appid,
                name = p_wdx_applications_rec.name,
                description = p_wdx_applications_rec.description,
                active = p_wdx_applications_rec.active,
                app_type = p_wdx_applications_rec.app_type,
                access_control = p_wdx_applications_rec.access_control,
                auth_scheme = p_wdx_applications_rec.auth_scheme,
                modified_by = NVL(dbax_security.get_username(dbax_core.g$appid),USER),
                modified_date = SYSDATE
           WHERE
                appid = UPPER(upd.p_wdx_applications_rec.appid)
                ;
       END IF;

       IF SQL%ROWCOUNT != 1 THEN RAISE e_upd_failed; END IF;

    EXCEPTION
       WHEN e_upd_failed
       THEN
          raise_application_error (-20000, 'No rows were updated. The update failed.');
    END upd;


    PROCEDURE upd_rowid (
                         p_wdx_applications_rec         IN wdx_applications_rt,
                         p_ignore_nulls         IN boolean := FALSE
                        )
    IS
    BEGIN

       IF NVL (p_ignore_nulls, FALSE)
       THEN
          UPDATE   wdx_applications
             SET appid = NVL(p_wdx_applications_rec.appid,appid),
                name = NVL(p_wdx_applications_rec.name,name),
                description = NVL(p_wdx_applications_rec.description,description),
                active = NVL(p_wdx_applications_rec.active,active),
                app_type = NVL(p_wdx_applications_rec.app_type,app_type),
                access_control = NVL(p_wdx_applications_rec.access_control,access_control),
                auth_scheme = NVL(p_wdx_applications_rec.auth_scheme,auth_scheme),
                modified_by = NVL(dbax_core.g$username,USER),
                modified_date = SYSDATE
           WHERE  ROWID = p_wdx_applications_rec.row_id;
       ELSE
          UPDATE   wdx_applications
             SET appid = p_wdx_applications_rec.appid,
                name = p_wdx_applications_rec.name,
                description = p_wdx_applications_rec.description,
                active = p_wdx_applications_rec.active,
                app_type = p_wdx_applications_rec.app_type,
                access_control = p_wdx_applications_rec.access_control,
                auth_scheme = p_wdx_applications_rec.auth_scheme,
                modified_by = NVL(dbax_core.g$username,USER),
                modified_date = SYSDATE
           WHERE  ROWID = p_wdx_applications_rec.row_id;
       END IF;

       IF SQL%ROWCOUNT != 1 THEN RAISE e_upd_failed; END IF;

    EXCEPTION
       WHEN e_upd_failed
       THEN
          raise_application_error (-20000, 'No rows were updated. The update failed.');
    END upd_rowid;

   PROCEDURE web_upd (
                  p_wdx_applications_rec         IN wdx_applications_rt,
                  p_ignore_nulls         IN boolean := FALSE
                )
   IS
      l_wdx_applications_rec wdx_applications_rt;
   BEGIN

      OPEN wdx_applications_cur(
                             UPPER(web_upd.p_wdx_applications_rec.appid)
                        );

      FETCH wdx_applications_cur INTO l_wdx_applications_rec;

      IF wdx_applications_cur%NOTFOUND THEN
         CLOSE wdx_applications_cur;
         RAISE e_row_missing;
      ELSE
         IF p_wdx_applications_rec.hash != l_wdx_applications_rec.hash THEN
            CLOSE wdx_applications_cur;
            RAISE e_ol_check_failed;
         ELSE
            IF NVL(p_ignore_nulls, FALSE)
            THEN

                UPDATE   wdx_applications
                   SET appid = NVL(UPPER(p_wdx_applications_rec.appid),appid),
                       name = NVL(p_wdx_applications_rec.name,name),
                       description = NVL(p_wdx_applications_rec.description,description),
                       active = NVL(p_wdx_applications_rec.active,active),
                       app_type = NVL(p_wdx_applications_rec.app_type,app_type),
                       access_control = NVL(p_wdx_applications_rec.access_control,access_control),
                       auth_scheme = NVL(p_wdx_applications_rec.auth_scheme,auth_scheme),
                       modified_by = NVL(dbax_core.g$username,USER),
                       modified_date = SYSDATE
               WHERE CURRENT OF wdx_applications_cur;
            ELSE
                UPDATE   wdx_applications
                   SET appid = UPPER(p_wdx_applications_rec.appid),
                       name = p_wdx_applications_rec.name,
                       description = p_wdx_applications_rec.description,
                       active = p_wdx_applications_rec.active,
                       app_type = p_wdx_applications_rec.app_type,
                       access_control = p_wdx_applications_rec.access_control,
                       auth_scheme = p_wdx_applications_rec.auth_scheme,
                       modified_by = NVL(dbax_core.g$username,USER),
                       modified_date = SYSDATE
               WHERE CURRENT OF wdx_applications_cur;
            END IF;

            CLOSE wdx_applications_cur;
         END IF;
      END IF;

   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Update operation failed because the row is no longer in the database.');
   END web_upd;

   PROCEDURE web_upd_rowid (
                            p_wdx_applications_rec    IN wdx_applications_rt,
                            p_ignore_nulls         IN boolean := FALSE
                           )
   IS
      l_wdx_applications_rec wdx_applications_rt;
   BEGIN

      OPEN wdx_applications_rowid_cur(web_upd_rowid.p_wdx_applications_rec.row_id);

      FETCH wdx_applications_rowid_cur INTO l_wdx_applications_rec;

      IF wdx_applications_rowid_cur%NOTFOUND THEN
         CLOSE wdx_applications_rowid_cur;
         RAISE e_row_missing;
      ELSE
         IF web_upd_rowid.p_wdx_applications_rec.hash != l_wdx_applications_rec.hash THEN
            CLOSE wdx_applications_rowid_cur;
            RAISE e_ol_check_failed;
         ELSE
            IF NVL(web_upd_rowid.p_ignore_nulls, FALSE)
            THEN
                UPDATE   wdx_applications
                   SET appid = NVL(UPPER(p_wdx_applications_rec.appid),appid),
                       name = NVL(p_wdx_applications_rec.name,name),
                       description = NVL(p_wdx_applications_rec.description,description),
                       active = NVL(p_wdx_applications_rec.active,active),
                       app_type = NVL(p_wdx_applications_rec.app_type,app_type),
                       access_control = NVL(p_wdx_applications_rec.access_control,access_control),
                       auth_scheme = NVL(p_wdx_applications_rec.auth_scheme,auth_scheme),
                       modified_by = NVL(dbax_core.g$username,USER),
                       modified_date = SYSDATE
               WHERE CURRENT OF wdx_applications_rowid_cur;
            ELSE
                UPDATE   wdx_applications
                   SET appid = UPPER(p_wdx_applications_rec.appid),
                       name = p_wdx_applications_rec.name,
                       description = p_wdx_applications_rec.description,
                       active = p_wdx_applications_rec.active,
                       app_type = p_wdx_applications_rec.app_type,
                       access_control = p_wdx_applications_rec.access_control,
                       auth_scheme = p_wdx_applications_rec.auth_scheme,
                       modified_by = NVL(dbax_core.g$username,USER),
                       modified_date = SYSDATE
               WHERE CURRENT OF wdx_applications_rowid_cur;
            END IF;

            CLOSE wdx_applications_rowid_cur;
         END IF;
      END IF;

   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Update operation failed because the row is no longer in the database.');
   END web_upd_rowid;

    PROCEDURE del (
                  p_appid IN wdx_applications.appid%TYPE
                  )
    IS
    BEGIN

       DELETE FROM   wdx_applications
             WHERE
                  appid = UPPER(del.p_appid)
                   ;

       IF sql%ROWCOUNT != 1
       THEN
          RAISE e_del_failed;
       END IF;

    EXCEPTION
       WHEN e_del_failed
       THEN
          raise_application_error (-20000, 'No rows were deleted. The delete failed.');
    END del;

    PROCEDURE del_rowid (p_rowid IN varchar2)
    IS
    BEGIN

       DELETE FROM   wdx_applications
             WHERE   ROWID = del_rowid.p_rowid;

       IF sql%ROWCOUNT != 1
       THEN
          RAISE e_del_failed;
       END IF;

    EXCEPTION
       WHEN e_del_failed
       THEN
          raise_application_error (-20000, 'No rows were deleted. The delete failed.');
    END del_rowid;

    PROCEDURE web_del (
                      p_appid IN wdx_applications.appid%TYPE,
                      p_hash IN varchar2
                      )
   IS
      l_wdx_applications_rec wdx_applications_rt;
   BEGIN

      OPEN wdx_applications_cur(
                            UPPER(web_del.p_appid)
                            );

      FETCH wdx_applications_cur INTO l_wdx_applications_rec;

      IF wdx_applications_cur%NOTFOUND THEN
         CLOSE wdx_applications_cur;
         RAISE e_row_missing;
      ELSE
         IF web_del.p_hash != l_wdx_applications_rec.hash THEN
            CLOSE wdx_applications_cur;
            RAISE e_ol_check_failed;
         ELSE
            DELETE FROM wdx_applications
            WHERE CURRENT OF wdx_applications_cur;

            CLOSE wdx_applications_cur;
         END IF;
      END IF;

   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Delete operation failed because the row is no longer in the database.');
   END web_del;

   PROCEDURE web_del_rowid (p_rowid IN varchar2, p_hash IN varchar2)
   IS
      l_wdx_applications_rec wdx_applications_rt;
   BEGIN

      OPEN wdx_applications_rowid_cur(web_del_rowid.p_rowid);

      FETCH wdx_applications_rowid_cur INTO l_wdx_applications_rec;

      IF wdx_applications_rowid_cur%NOTFOUND THEN
         CLOSE wdx_applications_rowid_cur;
         RAISE e_row_missing;
      ELSE
         IF web_del_rowid.p_hash != l_wdx_applications_rec.hash THEN
            CLOSE wdx_applications_rowid_cur;
            RAISE e_ol_check_failed;
         ELSE
            DELETE FROM wdx_applications
            WHERE CURRENT OF wdx_applications_rowid_cur;

            CLOSE wdx_applications_rowid_cur;
         END IF;
      END IF;
   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Delete operation failed because the row is no longer in the database.');
   END web_del_rowid;


   FUNCTION get_xml (p_appid IN wdx_applications.appid%TYPE)
      RETURN XMLTYPE
   AS
      l_refcursor   sys_refcursor;
      l_dummy       VARCHAR2 (1);      
   BEGIN
      --If record not exists raise NO_DATA_FOUND
      SELECT   NULL
        INTO   l_dummy
        FROM   wdx_applications
       WHERE   appid = UPPER (p_appid) AND ROWNUM = 1;
    
      OPEN l_refcursor FOR
         SELECT   *
           FROM   wdx_applications
          WHERE   appid = UPPER (p_appid);

      RETURN xmltype (l_refcursor);
   END get_xml;
   
   FUNCTION get_tt (p_xml IN XMLTYPE)
      RETURN wdx_applications_tt
      PIPELINED
   IS
      l_wdx_applications_rec   wdx_applications_rt;
   BEGIN
      FOR c1 IN (SELECT   xt.*
                   FROM   XMLTABLE ('/ROWSET/ROW'
                                    PASSING get_tt.p_xml
                                    COLUMNS 
                                      "APPID"           VARCHAR2(50)   PATH 'APPID',
                                      "NAME"            VARCHAR2(50)   PATH 'NAME',
                                      "DESCRIPTION"     VARCHAR2(300)  PATH 'DESCRIPTION',
                                      "ACTIVE"          VARCHAR2(1)    PATH 'ACTIVE',
                                      "APP_TYPE"        VARCHAR2(50)   PATH 'APP_TYPE',
                                      "ACCESS_CONTROL"  VARCHAR2(50)   PATH 'ACCESS_CONTROL',
                                      "AUTH_SCHEME"     VARCHAR2(255)  PATH 'AUTH_SCHEME',
                                      "CREATED_BY"      VARCHAR2(100)  PATH 'CREATED_BY',
                                      "CREATED_DATE"    VARCHAR2(20)   PATH 'CREATED_DATE',
                                      "MODIFIED_BY"     VARCHAR2(100)  PATH 'MODIFIED_BY',
                                      "MODIFIED_DATE"   VARCHAR2(20)   PATH 'MODIFIED_DATE'
                                    ) xt)
      LOOP
         l_wdx_applications_rec.appid := c1.appid;
         l_wdx_applications_rec.name := c1.name;
         l_wdx_applications_rec.description := c1.description;
         l_wdx_applications_rec.active := c1.active;
         l_wdx_applications_rec.app_type := c1.app_type;
         l_wdx_applications_rec.access_control := c1.access_control;
         l_wdx_applications_rec.auth_scheme := c1.auth_scheme;
         l_wdx_applications_rec.created_by := c1.created_by;
         l_wdx_applications_rec.created_date := c1.created_date;
         l_wdx_applications_rec.modified_by := c1.modified_by;
         l_wdx_applications_rec.modified_date := c1.modified_date;
         PIPE ROW (l_wdx_applications_rec);
      END LOOP;

      RETURN;
   END get_tt;
   
END tapi_wdx_applications; 
/

