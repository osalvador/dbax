--
-- TAPI_WDX_USERS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY      tapi_wdx_users IS

   /**
   -- # TAPI_wdx_users
   -- Generated by: tapiGen2 - DO NOT MODIFY!
   -- Website: github.com/osalvador/tapiGen2
   -- Created On: 19-NOV-2015 16:08
   -- Created By: DBAX
   */


   --GLOBAL_PRIVATE_CURSORS
   --By PK
   CURSOR wdx_users_cur (
                       p_username IN wdx_users.username%TYPE
                       )
   IS
      SELECT
            username,
            password,
            first_name,
            last_name,
            display_name,
            email,
            status,
            created_by,
            created_date,
            modified_by,
            modified_date,
            tapi_wdx_users.hash(username),
            ROWID
      FROM wdx_users
      WHERE
           username = wdx_users_cur.p_username
      FOR UPDATE;

    --By Rowid
    CURSOR wdx_users_rowid_cur (p_rowid IN VARCHAR2)
    IS
      SELECT
             username,
             password,
             first_name,
             last_name,
             display_name,
             email,
             status,
             created_by,
             created_date,
             modified_by,
             modified_date,
             tapi_wdx_users.hash(username),
             ROWID
      FROM wdx_users
      WHERE ROWID = p_rowid
      FOR UPDATE;


    FUNCTION num_rows RETURN PLS_INTEGER
    AS
       l_count pls_integer;
    BEGIN
       SELECT   COUNT (*) into l_count FROM wdx_users;
       return l_count; 
    END num_rows;

    FUNCTION hash (
                  p_username IN wdx_users.username%TYPE
                  )
      RETURN varchar2
   IS
      l_retval hash_t;
      l_string CLOB;
      l_date_format VARCHAR2(64);
   BEGIN


     --Get actual NLS_DATE_FORMAT
     SELECT   VALUE
       INTO   l_date_format
       FROM   v$nls_parameters
      WHERE   parameter = 'NLS_DATE_FORMAT';

      --Alter session for date columns
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''YYYY/MM/DD hh24:mi:ss''';

      SELECT
            username||
            password||
            first_name||
            last_name||
            display_name||
            email||
            status||
            created_by||
            created_date||
            modified_by||
            modified_date
      INTO l_string
      FROM wdx_users
      WHERE
           username = hash.p_username
           ;

      --Restore NLS_DATE_FORMAT to default
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''' || l_date_format|| '''';

      l_retval := DBMS_CRYPTO.hash(l_string, DBMS_CRYPTO.hash_sh1);

      RETURN l_retval;

   END hash;

    FUNCTION hash_rowid (p_rowid IN varchar2)
      RETURN varchar2
   IS
      l_retval hash_t;
      l_string CLOB;
      l_date_format varchar2(64);
   BEGIN

      --Get actual NLS_DATE_FORMAT
      SELECT VALUE INTO l_date_format  FROM v$nls_parameters WHERE parameter ='NLS_DATE_FORMAT';

      --Alter session for date columns
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''YYYY/MM/DD hh24:mi:ss''';

      SELECT
            username||
            password||
            first_name||
            last_name||
            display_name||
            email||
            status||
            created_by||
            created_date||
            modified_by||
            modified_date
      INTO l_string
      FROM wdx_users
      WHERE  ROWID = hash_rowid.p_rowid;

      --Restore NLS_DATE_FORMAT to default
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''' || l_date_format|| '''';

      l_retval := DBMS_CRYPTO.hash(l_string, DBMS_CRYPTO.hash_sh1);

      RETURN l_retval;

   END hash_rowid;

   FUNCTION rt (
               p_username IN wdx_users.username%TYPE
               )
      RETURN wdx_users_rt RESULT_CACHE
   IS
      l_wdx_users_rec wdx_users_rt;
   BEGIN

      SELECT a.*,
             tapi_wdx_users.hash(username),
             rowid
      INTO l_wdx_users_rec
      FROM wdx_users a
      WHERE
           username = UPPER(rt.p_username)
           ;


      RETURN l_wdx_users_rec;

   END rt;

   FUNCTION rt_for_update (
                          p_username IN wdx_users.username%TYPE
                          )
      RETURN wdx_users_rt RESULT_CACHE
   IS
      l_wdx_users_rec wdx_users_rt;
   BEGIN


      SELECT a.*,
             tapi_wdx_users.hash(username),
             rowid
      INTO l_wdx_users_rec
      FROM wdx_users a
      WHERE
           username = UPPER(rt_for_update.p_username)
      FOR UPDATE;


      RETURN l_wdx_users_rec;

   END rt_for_update;

    FUNCTION tt (
                p_username IN wdx_users.username%TYPE DEFAULT NULL
                )
       RETURN wdx_users_tt
       PIPELINED
    IS
       l_wdx_users_rec   wdx_users_rt;
    BEGIN

       FOR c1 IN (SELECT   a.*, ROWID
                    FROM   wdx_users a
                   WHERE
                        username = NVL(UPPER(tt.p_username),username)
                        )
       LOOP
              l_wdx_users_rec.username := c1.username;
              l_wdx_users_rec.password := c1.password;
              l_wdx_users_rec.first_name := c1.first_name;
              l_wdx_users_rec.last_name := c1.last_name;
              l_wdx_users_rec.display_name := c1.display_name;
              l_wdx_users_rec.email := c1.email;
              l_wdx_users_rec.status := c1.status;
              l_wdx_users_rec.created_by := c1.created_by;
              l_wdx_users_rec.created_date := c1.created_date;
              l_wdx_users_rec.modified_by := c1.modified_by;
              l_wdx_users_rec.modified_date := c1.modified_date;
              l_wdx_users_rec.hash := tapi_wdx_users.hash( c1.username);
              l_wdx_users_rec.row_id := c1.ROWID;
              PIPE ROW (l_wdx_users_rec);
       END LOOP;

       RETURN;

    END tt;


    PROCEDURE ins (p_wdx_users_rec IN OUT wdx_users_rt)
    IS
        l_rowtype     wdx_users%ROWTYPE;
        l_user_name   wdx_users.created_by%TYPE := NVL(USER,dbax_core.g$username); /*or apex_application.g_user*/
        l_date        wdx_users.created_date%TYPE := SYSDATE;

    BEGIN

        p_wdx_users_rec.created_by := l_user_name;
        p_wdx_users_rec.created_date := l_date;
        p_wdx_users_rec.modified_by := l_user_name;
        p_wdx_users_rec.modified_date := l_date;

        l_rowtype.username :=   UPPER(ins.p_wdx_users_rec.username);
        l_rowtype.password := ins.p_wdx_users_rec.password;
        l_rowtype.first_name := ins.p_wdx_users_rec.first_name;
        l_rowtype.last_name := ins.p_wdx_users_rec.last_name;
        l_rowtype.display_name := ins.p_wdx_users_rec.display_name;
        l_rowtype.email := ins.p_wdx_users_rec.email;
        l_rowtype.status := ins.p_wdx_users_rec.status;
        l_rowtype.created_by := ins.p_wdx_users_rec.created_by;
        l_rowtype.created_date := ins.p_wdx_users_rec.created_date;
        l_rowtype.modified_by := ins.p_wdx_users_rec.modified_by;
        l_rowtype.modified_date := ins.p_wdx_users_rec.modified_date;

       INSERT INTO wdx_users
         VALUES   l_rowtype;


    END ins;

    PROCEDURE upd (
                  p_wdx_users_rec         IN wdx_users_rt,
                  p_ignore_nulls         IN boolean := FALSE
                  )
    IS
    BEGIN

       IF NVL (p_ignore_nulls, FALSE)
       THEN
          UPDATE   wdx_users
             SET username = NVL(p_wdx_users_rec.username,username),                
                first_name = NVL(p_wdx_users_rec.first_name,first_name),
                last_name = NVL(p_wdx_users_rec.last_name,last_name),
                display_name = NVL(p_wdx_users_rec.display_name,display_name),
                email = NVL(p_wdx_users_rec.email,email),
                status = NVL(p_wdx_users_rec.status,status),
                modified_by = NVL(USER,dbax_core.g$username),
                modified_date = SYSDATE
           WHERE
                username = upd.p_wdx_users_rec.username
                ;
       ELSE
          UPDATE   wdx_users
             SET username = p_wdx_users_rec.username,                
                first_name = p_wdx_users_rec.first_name,
                last_name = p_wdx_users_rec.last_name,
                display_name = p_wdx_users_rec.display_name,
                email = p_wdx_users_rec.email,
                status = p_wdx_users_rec.status,
                modified_by = NVL(USER,dbax_core.g$username),
                modified_date = SYSDATE
           WHERE
                username = upd.p_wdx_users_rec.username
                ;
       END IF;

       IF SQL%ROWCOUNT != 1 THEN RAISE e_upd_failed; END IF;

    EXCEPTION
       WHEN e_upd_failed
       THEN
          raise_application_error (-20000, 'No rows were updated. The update failed.');
    END upd;


    PROCEDURE upd_rowid (
                         p_wdx_users_rec         IN wdx_users_rt,
                         p_ignore_nulls         IN boolean := FALSE
                        )
    IS
    BEGIN

       IF NVL (p_ignore_nulls, FALSE)
       THEN
          UPDATE   wdx_users
             SET username = NVL(p_wdx_users_rec.username,username),                
                first_name = NVL(p_wdx_users_rec.first_name,first_name),
                last_name = NVL(p_wdx_users_rec.last_name,last_name),
                display_name = NVL(p_wdx_users_rec.display_name,display_name),
                email = NVL(p_wdx_users_rec.email,email),
                status = NVL(p_wdx_users_rec.status,status),
                modified_by = NVL(USER,dbax_core.g$username),
                modified_date = SYSDATE
           WHERE  ROWID = p_wdx_users_rec.row_id;
       ELSE
          UPDATE   wdx_users
             SET username = p_wdx_users_rec.username,                
                first_name = p_wdx_users_rec.first_name,
                last_name = p_wdx_users_rec.last_name,
                display_name = p_wdx_users_rec.display_name,
                email = p_wdx_users_rec.email,
                status = p_wdx_users_rec.status,
                modified_by = NVL(USER,dbax_core.g$username),
                modified_date = SYSDATE
           WHERE  ROWID = p_wdx_users_rec.row_id;
       END IF;

       IF SQL%ROWCOUNT != 1 THEN RAISE e_upd_failed; END IF;

    EXCEPTION
       WHEN e_upd_failed
       THEN
          raise_application_error (-20000, 'No rows were updated. The update failed.');
    END upd_rowid;

   PROCEDURE web_upd (
                  p_wdx_users_rec         IN wdx_users_rt,
                  p_ignore_nulls         IN boolean := FALSE
                )
   IS
      l_wdx_users_rec wdx_users_rt;
   BEGIN

      OPEN wdx_users_cur(
                             web_upd.p_wdx_users_rec.username
                        );

      FETCH wdx_users_cur INTO l_wdx_users_rec;

      IF wdx_users_cur%NOTFOUND THEN
         CLOSE wdx_users_cur;
         RAISE e_row_missing;
      ELSE
         IF p_wdx_users_rec.hash != l_wdx_users_rec.hash THEN
            CLOSE wdx_users_cur;
            RAISE e_ol_check_failed;
         ELSE
            IF NVL(p_ignore_nulls, FALSE)
            THEN

                UPDATE   wdx_users
                   SET username = NVL(p_wdx_users_rec.username,username),                       
                       first_name = NVL(p_wdx_users_rec.first_name,first_name),
                       last_name = NVL(p_wdx_users_rec.last_name,last_name),
                       display_name = NVL(p_wdx_users_rec.display_name,display_name),
                       email = NVL(p_wdx_users_rec.email,email),
                       status = NVL(p_wdx_users_rec.status,status),
                       modified_by = NVL(USER,dbax_core.g$username),
                       modified_date = SYSDATE
               WHERE CURRENT OF wdx_users_cur;
            ELSE
                UPDATE   wdx_users
                   SET username = p_wdx_users_rec.username,                       
                       first_name = p_wdx_users_rec.first_name,
                       last_name = p_wdx_users_rec.last_name,
                       display_name = p_wdx_users_rec.display_name,
                       email = p_wdx_users_rec.email,
                       status = p_wdx_users_rec.status,
                       modified_by = NVL(USER,dbax_core.g$username),
                       modified_date = SYSDATE
               WHERE CURRENT OF wdx_users_cur;
            END IF;

            CLOSE wdx_users_cur;
         END IF;
      END IF;


   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Update operation failed because the row is no longer in the database.');
   END web_upd;

   PROCEDURE web_upd_rowid (
                            p_wdx_users_rec    IN wdx_users_rt,
                            p_ignore_nulls         IN boolean := FALSE
                           )
   IS
      l_wdx_users_rec wdx_users_rt;
   BEGIN

      OPEN wdx_users_rowid_cur(web_upd_rowid.p_wdx_users_rec.row_id);

      FETCH wdx_users_rowid_cur INTO l_wdx_users_rec;

      IF wdx_users_rowid_cur%NOTFOUND THEN
         CLOSE wdx_users_rowid_cur;
         RAISE e_row_missing;
      ELSE
         IF web_upd_rowid.p_wdx_users_rec.hash != l_wdx_users_rec.hash THEN
            CLOSE wdx_users_rowid_cur;
            RAISE e_ol_check_failed;
         ELSE
            IF NVL(web_upd_rowid.p_ignore_nulls, FALSE)
            THEN
                UPDATE   wdx_users
                   SET username = NVL(p_wdx_users_rec.username,username),                       
                       first_name = NVL(p_wdx_users_rec.first_name,first_name),
                       last_name = NVL(p_wdx_users_rec.last_name,last_name),
                       display_name = NVL(p_wdx_users_rec.display_name,display_name),
                       email = NVL(p_wdx_users_rec.email,email),
                       status = NVL(p_wdx_users_rec.status,status),
                       modified_by = NVL(USER,dbax_core.g$username),
                       modified_date = SYSDATE
               WHERE CURRENT OF wdx_users_rowid_cur;
            ELSE
                UPDATE   wdx_users
                   SET username = p_wdx_users_rec.username,                       
                       first_name = p_wdx_users_rec.first_name,
                       last_name = p_wdx_users_rec.last_name,
                       display_name = p_wdx_users_rec.display_name,
                       email = p_wdx_users_rec.email,
                       status = p_wdx_users_rec.status,
                       modified_by = NVL(USER,dbax_core.g$username),
                       modified_date = SYSDATE
               WHERE CURRENT OF wdx_users_rowid_cur;
            END IF;

            CLOSE wdx_users_rowid_cur;
         END IF;
      END IF;


   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Update operation failed because the row is no longer in the database.');
   END web_upd_rowid;

    PROCEDURE del (
                  p_username IN wdx_users.username%TYPE
                  )
    IS
    BEGIN
    
       
        DELETE FROM   WDX_USER_OPTIONS
        WHERE    username = del.p_username;
        
        DELETE FROM   WDX_USERS_ROLES
        WHERE    username = del.p_username;

        DELETE FROM   wdx_users
        WHERE     username = del.p_username;
        
       IF sql%ROWCOUNT != 1
       THEN
          RAISE e_del_failed;
       END IF;


    EXCEPTION
       WHEN e_del_failed
       THEN
          raise_application_error (-20000, 'No rows were deleted. The delete failed.');
    END del;

    PROCEDURE del_rowid (p_rowid IN varchar2)
    IS
    BEGIN

       DELETE FROM   wdx_users
             WHERE   ROWID = del_rowid.p_rowid;

       IF sql%ROWCOUNT != 1
       THEN
          RAISE e_del_failed;
       END IF;


    EXCEPTION
       WHEN e_del_failed
       THEN
          raise_application_error (-20000, 'No rows were deleted. The delete failed.');
    END del_rowid;

    PROCEDURE web_del (
                      p_username IN wdx_users.username%TYPE,
                      p_hash IN varchar2
                      )
   IS
      l_wdx_users_rec wdx_users_rt;
   BEGIN


      OPEN wdx_users_cur(
                            web_del.p_username
                            );

      FETCH wdx_users_cur INTO l_wdx_users_rec;

      IF wdx_users_cur%NOTFOUND THEN
         CLOSE wdx_users_cur;
         RAISE e_row_missing;
      ELSE
         IF web_del.p_hash != l_wdx_users_rec.hash THEN
            CLOSE wdx_users_cur;
            RAISE e_ol_check_failed;
         ELSE
            DELETE FROM wdx_users
            WHERE CURRENT OF wdx_users_cur;

            CLOSE wdx_users_cur;
         END IF;
      END IF;



   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Delete operation failed because the row is no longer in the database.');
   END web_del;

   PROCEDURE web_del_rowid (p_rowid IN varchar2, p_hash IN varchar2)
   IS
      l_wdx_users_rec wdx_users_rt;
   BEGIN


      OPEN wdx_users_rowid_cur(web_del_rowid.p_rowid);

      FETCH wdx_users_rowid_cur INTO l_wdx_users_rec;

      IF wdx_users_rowid_cur%NOTFOUND THEN
         CLOSE wdx_users_rowid_cur;
         RAISE e_row_missing;
      ELSE
         IF web_del_rowid.p_hash != l_wdx_users_rec.hash THEN
            CLOSE wdx_users_rowid_cur;
            RAISE e_ol_check_failed;
         ELSE
            DELETE FROM wdx_users
            WHERE CURRENT OF wdx_users_rowid_cur;

            CLOSE wdx_users_rowid_cur;
         END IF;
      END IF;

   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Delete operation failed because the row is no longer in the database.');
   END web_del_rowid;


 
    FUNCTION users_with_roles_tt (                
                p_rolename IN wdx_users_roles.rolename%TYPE,
                p_appid IN wdx_users_roles.appid%TYPE 
               )
   RETURN wdx_users_tt   
      PIPELINED
    IS
       l_wdx_users_rec   wdx_users_rt;
    BEGIN

       FOR c1 IN (SELECT   a.*, ROWID
                    FROM   wdx_users a
                   WHERE   EXISTS (SELECT   1
                                     FROM   wdx_users_roles b
                                     WHERE  rolename = users_with_roles_tt.p_rolename AND appid = users_with_roles_tt.p_appid
                                     AND    a.username = b.username))                        
       LOOP
              l_wdx_users_rec.username := c1.username;              
              l_wdx_users_rec.first_name := c1.first_name;
              l_wdx_users_rec.last_name := c1.last_name;
              l_wdx_users_rec.display_name := c1.display_name;
              l_wdx_users_rec.email := c1.email;
              l_wdx_users_rec.status := c1.status;
              l_wdx_users_rec.created_by := c1.created_by;
              l_wdx_users_rec.created_date := c1.created_date;
              l_wdx_users_rec.modified_by := c1.modified_by;
              l_wdx_users_rec.modified_date := c1.modified_date;
              l_wdx_users_rec.hash := tapi_wdx_users.hash( c1.username);
              l_wdx_users_rec.row_id := c1.ROWID;
              PIPE ROW (l_wdx_users_rec);
       END LOOP;

       RETURN;

    END users_with_roles_tt;
   
   FUNCTION users_without_roles_tt (                
                p_rolename IN wdx_users_roles.rolename%TYPE,
                p_appid IN wdx_users_roles.appid%TYPE 
               )
   RETURN wdx_users_tt   
      PIPELINED
    IS
       l_wdx_users_rec   wdx_users_rt;
    BEGIN

       FOR c1 IN (SELECT   a.*, ROWID
                    FROM   wdx_users a
                   WHERE  NOT EXISTS (SELECT   1
                                     FROM   wdx_users_roles b
                                     WHERE  rolename = users_without_roles_tt.p_rolename AND appid = users_without_roles_tt.p_appid
                                     AND    a.username = b.username))                        
       LOOP
              l_wdx_users_rec.username := c1.username;              
              l_wdx_users_rec.first_name := c1.first_name;
              l_wdx_users_rec.last_name := c1.last_name;
              l_wdx_users_rec.display_name := c1.display_name;
              l_wdx_users_rec.email := c1.email;
              l_wdx_users_rec.status := c1.status;
              l_wdx_users_rec.created_by := c1.created_by;
              l_wdx_users_rec.created_date := c1.created_date;
              l_wdx_users_rec.modified_by := c1.modified_by;
              l_wdx_users_rec.modified_date := c1.modified_date;
              l_wdx_users_rec.hash := tapi_wdx_users.hash( c1.username);
              l_wdx_users_rec.row_id := c1.ROWID;
              PIPE ROW (l_wdx_users_rec);
       END LOOP;

       RETURN;

    END users_without_roles_tt;

END tapi_wdx_users;
/


