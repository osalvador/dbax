CREATE OR REPLACE PACKAGE BODY tapi_wdx_ldap IS

   /**
   * TAPI_WDX_LDAP
   * Generated by: tapiGen2 - DO NOT MODIFY!
   * Website: github.com/osalvador/tapiGen2
   * Created On: 30-MAY-2016 22:17
   * Created By: DBAX
   */


   --GLOBAL_PRIVATE_CURSORS
   --By PK
   CURSOR wdx_ldap_cur (
                       p_name IN wdx_ldap.name%TYPE
                       )
   IS
      SELECT
            name,
            host,
            port,
            dn,
            base,
            filter,
            attr_first_name,
            attr_last_name,
            attr_email,
            description,
            created_by,
            created_date,
            modified_by,
            modified_date,
            tapi_wdx_ldap.hash(name),
            ROWID
      FROM wdx_ldap
      WHERE
           name = wdx_ldap_cur.p_name
      FOR UPDATE;

    --By Rowid
    CURSOR wdx_ldap_rowid_cur (p_rowid IN VARCHAR2)
    IS
      SELECT
             name,
             host,
             port,
             dn,
             base,
             filter,
             attr_first_name,
             attr_last_name,
             attr_email,
             description,
             created_by,
             created_date,
             modified_by,
             modified_date,
             tapi_wdx_ldap.hash(name),
             ROWID
      FROM wdx_ldap
      WHERE ROWID = p_rowid
      FOR UPDATE;


    FUNCTION hash (
                  p_name IN wdx_ldap.name%TYPE
                  )
      RETURN varchar2
   IS
      l_retval hash_t;
      l_string CLOB;
      l_date_format VARCHAR2(64);
   BEGIN


     --Get actual NLS_DATE_FORMAT
     SELECT   VALUE
       INTO   l_date_format
       FROM   v$nls_parameters
      WHERE   parameter = 'NLS_DATE_FORMAT';

      --Alter session for date columns
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''YYYY/MM/DD hh24:mi:ss''';

      SELECT
            name||
            host||
            port||
            dn||
            base||
            filter||
            attr_first_name||
            attr_last_name||
            attr_email||
            description||
            created_by||
            created_date||
            modified_by||
            modified_date
      INTO l_string
      FROM wdx_ldap
      WHERE
           name = hash.p_name
           ;

      --Restore NLS_DATE_FORMAT to default
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''' || l_date_format|| '''';

      l_retval := DBMS_CRYPTO.hash(l_string, DBMS_CRYPTO.hash_sh1);

      RETURN l_retval;

   END hash;

    FUNCTION hash_rowid (p_rowid IN varchar2)
      RETURN varchar2
   IS
      l_retval hash_t;
      l_string CLOB;
      l_date_format varchar2(64);
   BEGIN

      --Get actual NLS_DATE_FORMAT
      SELECT VALUE INTO l_date_format  FROM v$nls_parameters WHERE parameter ='NLS_DATE_FORMAT';

      --Alter session for date columns
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''YYYY/MM/DD hh24:mi:ss''';

      SELECT
            name||
            host||
            port||
            dn||
            base||
            filter||
            attr_first_name||
            attr_last_name||
            attr_email||
            description||
            created_by||
            created_date||
            modified_by||
            modified_date
      INTO l_string
      FROM wdx_ldap
      WHERE  ROWID = hash_rowid.p_rowid;

      --Restore NLS_DATE_FORMAT to default
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT=''' || l_date_format|| '''';

      l_retval := DBMS_CRYPTO.hash(l_string, DBMS_CRYPTO.hash_sh1);

      RETURN l_retval;

   END hash_rowid;

   FUNCTION rt (
               p_name IN wdx_ldap.name%TYPE
               )
      RETURN wdx_ldap_rt RESULT_CACHE
   IS
      l_wdx_ldap_rec wdx_ldap_rt;
   BEGIN

      SELECT a.*,
             tapi_wdx_ldap.hash(name),
             rowid
      INTO l_wdx_ldap_rec
      FROM wdx_ldap a
      WHERE
           name = rt.p_name
           ;


      RETURN l_wdx_ldap_rec;

   END rt;

   FUNCTION rt_for_update (
                          p_name IN wdx_ldap.name%TYPE
                          )
      RETURN wdx_ldap_rt RESULT_CACHE
   IS
      l_wdx_ldap_rec wdx_ldap_rt;
   BEGIN


      SELECT a.*,
             tapi_wdx_ldap.hash(name),
             rowid
      INTO l_wdx_ldap_rec
      FROM wdx_ldap a
      WHERE
           name = rt_for_update.p_name
      FOR UPDATE;


      RETURN l_wdx_ldap_rec;

   END rt_for_update;

    FUNCTION tt (
                p_name IN wdx_ldap.name%TYPE DEFAULT NULL
                )
       RETURN wdx_ldap_tt
       PIPELINED
    IS
       l_wdx_ldap_rec   wdx_ldap_rt;
    BEGIN

       FOR c1 IN (SELECT   a.*, ROWID
                    FROM   wdx_ldap a
                   WHERE
                        name = NVL(tt.p_name,name)
                        )
       LOOP
              l_wdx_ldap_rec.name := c1.name;
              l_wdx_ldap_rec.host := c1.host;
              l_wdx_ldap_rec.port := c1.port;
              l_wdx_ldap_rec.dn := c1.dn;
              l_wdx_ldap_rec.base := c1.base;
              l_wdx_ldap_rec.filter := c1.filter;
              l_wdx_ldap_rec.attr_first_name := c1.attr_first_name;
              l_wdx_ldap_rec.attr_last_name := c1.attr_last_name;
              l_wdx_ldap_rec.attr_email := c1.attr_email;
              l_wdx_ldap_rec.description := c1.description;
              l_wdx_ldap_rec.created_by := c1.created_by;
              l_wdx_ldap_rec.created_date := c1.created_date;
              l_wdx_ldap_rec.modified_by := c1.modified_by;
              l_wdx_ldap_rec.modified_date := c1.modified_date;
              l_wdx_ldap_rec.hash := tapi_wdx_ldap.hash( c1.name);
              l_wdx_ldap_rec.row_id := c1.ROWID;
              PIPE ROW (l_wdx_ldap_rec);
       END LOOP;

       RETURN;

    END tt;


    PROCEDURE ins (p_wdx_ldap_rec IN OUT wdx_ldap_rt)
    IS
        l_rowtype     wdx_ldap%ROWTYPE;
        
        l_user_name   wdx_ldap.created_by%TYPE := NVL(dbax_security.get_username (dbax_core.g$appid),USER);
        l_date        wdx_ldap.created_date%TYPE := SYSDATE;

    BEGIN

        ins.p_wdx_ldap_rec.created_by := l_user_name;
        ins.p_wdx_ldap_rec.created_date := l_date;
        ins.p_wdx_ldap_rec.modified_by := l_user_name;
        ins.p_wdx_ldap_rec.modified_date := l_date;

        l_rowtype.name := ins.p_wdx_ldap_rec.name;
        l_rowtype.host := ins.p_wdx_ldap_rec.host;
        l_rowtype.port := ins.p_wdx_ldap_rec.port;
        l_rowtype.dn := ins.p_wdx_ldap_rec.dn;
        l_rowtype.base := ins.p_wdx_ldap_rec.base;
        l_rowtype.filter := ins.p_wdx_ldap_rec.filter;
        l_rowtype.attr_first_name := ins.p_wdx_ldap_rec.attr_first_name;
        l_rowtype.attr_last_name := ins.p_wdx_ldap_rec.attr_last_name;
        l_rowtype.attr_email := ins.p_wdx_ldap_rec.attr_email;
        l_rowtype.description := ins.p_wdx_ldap_rec.description;
        l_rowtype.created_by := ins.p_wdx_ldap_rec.created_by;
        l_rowtype.created_date := ins.p_wdx_ldap_rec.created_date;
        l_rowtype.modified_by := ins.p_wdx_ldap_rec.modified_by;
        l_rowtype.modified_date := ins.p_wdx_ldap_rec.modified_date;

       INSERT INTO wdx_ldap
         VALUES   l_rowtype;


    END ins;

    PROCEDURE upd (
                  p_wdx_ldap_rec         IN wdx_ldap_rt,
                  p_ignore_nulls         IN boolean := FALSE
                  )
    IS
    BEGIN

       IF NVL (p_ignore_nulls, FALSE)
       THEN
          UPDATE   wdx_ldap
             SET name = NVL(p_wdx_ldap_rec.name,name),
                host = NVL(p_wdx_ldap_rec.host,host),
                port = NVL(p_wdx_ldap_rec.port,port),
                dn = NVL(p_wdx_ldap_rec.dn,dn),
                base = NVL(p_wdx_ldap_rec.base,base),
                filter = NVL(p_wdx_ldap_rec.filter,filter),
                attr_first_name = NVL(p_wdx_ldap_rec.attr_first_name,attr_first_name),
                attr_last_name = NVL(p_wdx_ldap_rec.attr_last_name,attr_last_name),
                attr_email = NVL(p_wdx_ldap_rec.attr_email,attr_email),
                description = NVL(p_wdx_ldap_rec.description,description),
                created_by = NVL(p_wdx_ldap_rec.created_by,created_by),
                created_date = NVL(p_wdx_ldap_rec.created_date,created_date),
                modified_by = NVL(p_wdx_ldap_rec.modified_by,modified_by),
                modified_date = NVL(p_wdx_ldap_rec.modified_date,modified_date)
           WHERE
                name = upd.p_wdx_ldap_rec.name
                ;
       ELSE
          UPDATE   wdx_ldap
             SET name = p_wdx_ldap_rec.name,
                host = p_wdx_ldap_rec.host,
                port = p_wdx_ldap_rec.port,
                dn = p_wdx_ldap_rec.dn,
                base = p_wdx_ldap_rec.base,
                filter = p_wdx_ldap_rec.filter,
                attr_first_name = p_wdx_ldap_rec.attr_first_name,
                attr_last_name = p_wdx_ldap_rec.attr_last_name,
                attr_email = p_wdx_ldap_rec.attr_email,
                description = p_wdx_ldap_rec.description,
                created_by = p_wdx_ldap_rec.created_by,
                created_date = p_wdx_ldap_rec.created_date,
                modified_by = p_wdx_ldap_rec.modified_by,
                modified_date = p_wdx_ldap_rec.modified_date
           WHERE
                name = upd.p_wdx_ldap_rec.name
                ;
       END IF;

       IF SQL%ROWCOUNT != 1 THEN RAISE e_upd_failed; END IF;

    EXCEPTION
       WHEN e_upd_failed
       THEN
          raise_application_error (-20000, 'No rows were updated. The update failed.');
    END upd;


    PROCEDURE upd_rowid (
                         p_wdx_ldap_rec         IN wdx_ldap_rt,
                         p_ignore_nulls         IN boolean := FALSE
                        )
    IS
    BEGIN

       IF NVL (p_ignore_nulls, FALSE)
       THEN
          UPDATE   wdx_ldap
             SET name = NVL(p_wdx_ldap_rec.name,name),
                host = NVL(p_wdx_ldap_rec.host,host),
                port = NVL(p_wdx_ldap_rec.port,port),
                dn = NVL(p_wdx_ldap_rec.dn,dn),
                base = NVL(p_wdx_ldap_rec.base,base),
                filter = NVL(p_wdx_ldap_rec.filter,filter),
                attr_first_name = NVL(p_wdx_ldap_rec.attr_first_name,attr_first_name),
                attr_last_name = NVL(p_wdx_ldap_rec.attr_last_name,attr_last_name),
                attr_email = NVL(p_wdx_ldap_rec.attr_email,attr_email),
                description = NVL(p_wdx_ldap_rec.description,description),
                created_by = NVL(p_wdx_ldap_rec.created_by,created_by),
                created_date = NVL(p_wdx_ldap_rec.created_date,created_date),
                modified_by = NVL(p_wdx_ldap_rec.modified_by,modified_by),
                modified_date = NVL(p_wdx_ldap_rec.modified_date,modified_date)
           WHERE  ROWID = p_wdx_ldap_rec.row_id;
       ELSE
          UPDATE   wdx_ldap
             SET name = p_wdx_ldap_rec.name,
                host = p_wdx_ldap_rec.host,
                port = p_wdx_ldap_rec.port,
                dn = p_wdx_ldap_rec.dn,
                base = p_wdx_ldap_rec.base,
                filter = p_wdx_ldap_rec.filter,
                attr_first_name = p_wdx_ldap_rec.attr_first_name,
                attr_last_name = p_wdx_ldap_rec.attr_last_name,
                attr_email = p_wdx_ldap_rec.attr_email,
                description = p_wdx_ldap_rec.description,
                created_by = p_wdx_ldap_rec.created_by,
                created_date = p_wdx_ldap_rec.created_date,
                modified_by = p_wdx_ldap_rec.modified_by,
                modified_date = p_wdx_ldap_rec.modified_date
           WHERE  ROWID = p_wdx_ldap_rec.row_id;
       END IF;

       IF SQL%ROWCOUNT != 1 THEN RAISE e_upd_failed; END IF;

    EXCEPTION
       WHEN e_upd_failed
       THEN
          raise_application_error (-20000, 'No rows were updated. The update failed.');
    END upd_rowid;

   PROCEDURE web_upd (
                  p_wdx_ldap_rec         IN wdx_ldap_rt,
                  p_ignore_nulls         IN boolean := FALSE
                )
   IS
      l_wdx_ldap_rec wdx_ldap_rt;
   BEGIN

      OPEN wdx_ldap_cur(
                             web_upd.p_wdx_ldap_rec.name
                        );

      FETCH wdx_ldap_cur INTO l_wdx_ldap_rec;

      IF wdx_ldap_cur%NOTFOUND THEN
         CLOSE wdx_ldap_cur;
         RAISE e_row_missing;
      ELSE
         IF p_wdx_ldap_rec.hash != l_wdx_ldap_rec.hash THEN
            CLOSE wdx_ldap_cur;
            RAISE e_ol_check_failed;
         ELSE
            IF NVL(p_ignore_nulls, FALSE)
            THEN

                UPDATE   wdx_ldap
                   SET name = NVL(p_wdx_ldap_rec.name,name),
                       host = NVL(p_wdx_ldap_rec.host,host),
                       port = NVL(p_wdx_ldap_rec.port,port),
                       dn = NVL(p_wdx_ldap_rec.dn,dn),
                       base = NVL(p_wdx_ldap_rec.base,base),
                       filter = NVL(p_wdx_ldap_rec.filter,filter),
                       attr_first_name = NVL(p_wdx_ldap_rec.attr_first_name,attr_first_name),
                       attr_last_name = NVL(p_wdx_ldap_rec.attr_last_name,attr_last_name),
                       attr_email = NVL(p_wdx_ldap_rec.attr_email,attr_email),
                       description = NVL(p_wdx_ldap_rec.description,description),
                       created_by = NVL(p_wdx_ldap_rec.created_by,created_by),
                       created_date = NVL(p_wdx_ldap_rec.created_date,created_date),
                       modified_by = NVL(p_wdx_ldap_rec.modified_by,modified_by),
                       modified_date = NVL(p_wdx_ldap_rec.modified_date,modified_date)
               WHERE CURRENT OF wdx_ldap_cur;
            ELSE
                UPDATE   wdx_ldap
                   SET name = p_wdx_ldap_rec.name,
                       host = p_wdx_ldap_rec.host,
                       port = p_wdx_ldap_rec.port,
                       dn = p_wdx_ldap_rec.dn,
                       base = p_wdx_ldap_rec.base,
                       filter = p_wdx_ldap_rec.filter,
                       attr_first_name = p_wdx_ldap_rec.attr_first_name,
                       attr_last_name = p_wdx_ldap_rec.attr_last_name,
                       attr_email = p_wdx_ldap_rec.attr_email,
                       description = p_wdx_ldap_rec.description,
                       created_by = p_wdx_ldap_rec.created_by,
                       created_date = p_wdx_ldap_rec.created_date,
                       modified_by = p_wdx_ldap_rec.modified_by,
                       modified_date = p_wdx_ldap_rec.modified_date
               WHERE CURRENT OF wdx_ldap_cur;
            END IF;

            CLOSE wdx_ldap_cur;
         END IF;
      END IF;


   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Update operation failed because the row is no longer in the database.');
   END web_upd;

   PROCEDURE web_upd_rowid (
                            p_wdx_ldap_rec    IN wdx_ldap_rt,
                            p_ignore_nulls         IN boolean := FALSE
                           )
   IS
      l_wdx_ldap_rec wdx_ldap_rt;
   BEGIN

      OPEN wdx_ldap_rowid_cur(web_upd_rowid.p_wdx_ldap_rec.row_id);

      FETCH wdx_ldap_rowid_cur INTO l_wdx_ldap_rec;

      IF wdx_ldap_rowid_cur%NOTFOUND THEN
         CLOSE wdx_ldap_rowid_cur;
         RAISE e_row_missing;
      ELSE
         IF web_upd_rowid.p_wdx_ldap_rec.hash != l_wdx_ldap_rec.hash THEN
            CLOSE wdx_ldap_rowid_cur;
            RAISE e_ol_check_failed;
         ELSE
            IF NVL(web_upd_rowid.p_ignore_nulls, FALSE)
            THEN
                UPDATE   wdx_ldap
                   SET name = NVL(p_wdx_ldap_rec.name,name),
                       host = NVL(p_wdx_ldap_rec.host,host),
                       port = NVL(p_wdx_ldap_rec.port,port),
                       dn = NVL(p_wdx_ldap_rec.dn,dn),
                       base = NVL(p_wdx_ldap_rec.base,base),
                       filter = NVL(p_wdx_ldap_rec.filter,filter),
                       attr_first_name = NVL(p_wdx_ldap_rec.attr_first_name,attr_first_name),
                       attr_last_name = NVL(p_wdx_ldap_rec.attr_last_name,attr_last_name),
                       attr_email = NVL(p_wdx_ldap_rec.attr_email,attr_email),
                       description = NVL(p_wdx_ldap_rec.description,description),
                       created_by = NVL(p_wdx_ldap_rec.created_by,created_by),
                       created_date = NVL(p_wdx_ldap_rec.created_date,created_date),
                       modified_by = NVL(p_wdx_ldap_rec.modified_by,modified_by),
                       modified_date = NVL(p_wdx_ldap_rec.modified_date,modified_date)
               WHERE CURRENT OF wdx_ldap_rowid_cur;
            ELSE
                UPDATE   wdx_ldap
                   SET name = p_wdx_ldap_rec.name,
                       host = p_wdx_ldap_rec.host,
                       port = p_wdx_ldap_rec.port,
                       dn = p_wdx_ldap_rec.dn,
                       base = p_wdx_ldap_rec.base,
                       filter = p_wdx_ldap_rec.filter,
                       attr_first_name = p_wdx_ldap_rec.attr_first_name,
                       attr_last_name = p_wdx_ldap_rec.attr_last_name,
                       attr_email = p_wdx_ldap_rec.attr_email,
                       description = p_wdx_ldap_rec.description,
                       created_by = p_wdx_ldap_rec.created_by,
                       created_date = p_wdx_ldap_rec.created_date,
                       modified_by = p_wdx_ldap_rec.modified_by,
                       modified_date = p_wdx_ldap_rec.modified_date
               WHERE CURRENT OF wdx_ldap_rowid_cur;
            END IF;

            CLOSE wdx_ldap_rowid_cur;
         END IF;
      END IF;


   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Update operation failed because the row is no longer in the database.');
   END web_upd_rowid;

    PROCEDURE del (
                  p_name IN wdx_ldap.name%TYPE
                  )
    IS
    BEGIN

       DELETE FROM   wdx_ldap
             WHERE
                  name = del.p_name
                   ;

       IF sql%ROWCOUNT != 1
       THEN
          RAISE e_del_failed;
       END IF;


    EXCEPTION
       WHEN e_del_failed
       THEN
          raise_application_error (-20000, 'No rows were deleted. The delete failed.');
    END del;

    PROCEDURE del_rowid (p_rowid IN varchar2)
    IS
    BEGIN

       DELETE FROM   wdx_ldap
             WHERE   ROWID = del_rowid.p_rowid;

       IF sql%ROWCOUNT != 1
       THEN
          RAISE e_del_failed;
       END IF;


    EXCEPTION
       WHEN e_del_failed
       THEN
          raise_application_error (-20000, 'No rows were deleted. The delete failed.');
    END del_rowid;

    PROCEDURE web_del (
                      p_name IN wdx_ldap.name%TYPE,
                      p_hash IN varchar2
                      )
   IS
      l_wdx_ldap_rec wdx_ldap_rt;
   BEGIN


      OPEN wdx_ldap_cur(
                            web_del.p_name
                            );

      FETCH wdx_ldap_cur INTO l_wdx_ldap_rec;

      IF wdx_ldap_cur%NOTFOUND THEN
         CLOSE wdx_ldap_cur;
         RAISE e_row_missing;
      ELSE
         IF web_del.p_hash != l_wdx_ldap_rec.hash THEN
            CLOSE wdx_ldap_cur;
            RAISE e_ol_check_failed;
         ELSE
            DELETE FROM wdx_ldap
            WHERE CURRENT OF wdx_ldap_cur;

            CLOSE wdx_ldap_cur;
         END IF;
      END IF;



   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Delete operation failed because the row is no longer in the database.');
   END web_del;

   PROCEDURE web_del_rowid (p_rowid IN varchar2, p_hash IN varchar2)
   IS
      l_wdx_ldap_rec wdx_ldap_rt;
   BEGIN


      OPEN wdx_ldap_rowid_cur(web_del_rowid.p_rowid);

      FETCH wdx_ldap_rowid_cur INTO l_wdx_ldap_rec;

      IF wdx_ldap_rowid_cur%NOTFOUND THEN
         CLOSE wdx_ldap_rowid_cur;
         RAISE e_row_missing;
      ELSE
         IF web_del_rowid.p_hash != l_wdx_ldap_rec.hash THEN
            CLOSE wdx_ldap_rowid_cur;
            RAISE e_ol_check_failed;
         ELSE
            DELETE FROM wdx_ldap
            WHERE CURRENT OF wdx_ldap_rowid_cur;

            CLOSE wdx_ldap_rowid_cur;
         END IF;
      END IF;

   EXCEPTION
     WHEN e_ol_check_failed
     THEN
        raise_application_error (-20000 , 'Current version of data in database has changed since last page refresh.');
     WHEN e_row_missing
     THEN
        raise_application_error (-20000 , 'Delete operation failed because the row is no longer in the database.');
   END web_del_rowid;

END tapi_wdx_ldap;
/

